class process{static get env(){return{GET_SERVICES__BASE_URL:"http://localhost:8080/",GET_SERVICES__SERVICE_FIELDS:"services/fields"}}}class ServiceFieldsController{constructor(){this._$=document.querySelector.bind(document),this._fieldsService=new FieldsService,this._serviceFields,this._serviceFieldsView=new FieldsView(this._$("#contentServices")),this._userFieldsView=new FieldsView(this._$("#contentUser")),this._getServiceFields(),this._setStateVisibleElement("#formServices")}async _getServiceFields(){this._serviceFields=await this._fieldsService.getServiceFields(),this._serviceFieldsView.update(this._serviceFields.requestFields),this._userFieldsView.update(this._serviceFields.userFields)}_setStateVisibleElement(e){this._clearStateVisibleElement(),this._$(e).classList.add("is-visible")}_clearStateVisibleElement(){this._$("#formServices").classList.remove("is-visible"),this._$("#formUser").classList.remove("is-visible"),this._$("#formSuccess").classList.remove("is-visible")}setServices(e){e.preventDefault(),this._setStateVisibleElement("#formUser")}confirmServices(e){e.preventDefault(),this._setStateVisibleElement("#formSuccess")}backToServices(e){e.preventDefault(),this._setStateVisibleElement("#formServices")}}class HandleLog{static error(e="",s=""){throw new Error(`ERROR: ${e} ${s}`)}static warning(e="",s=""){const t=`WARNING: ${e} ${s}`;console.warn(t)}static info(e="",s=""){const t=`INFO: ${e} ${s}`;console.info(t)}static log(e="",s=""){const t=`LOG: ${e} ${s}`;console.log(t)}}class Field{constructor(e="",s="",t="",i="",l="",r=!1,n=null){this._name=e,this._label=s,this._placeholder=t,this._mask=i,this._type=l,this._required=r,this._values=n?new Values(n).values:n}get name(){return this._name}get label(){return this._label}get placeholder(){return this._placeholder}get mask(){return this._mask}get type(){return this._type}get required(){return this._required}get values(){return this._values}}class ServiceFields{constructor(e=[],s=[]){this._userFields=e.length?this._createListFields(e):e,this._requestFields=s.length?this._createListFields(s):s}get userFields(){return[].concat(this._userFields)}get requestFields(){return[].concat(this._requestFields)}_createListFields(e){return e.map(e=>new Field(e.name,e.label,e.placeholder,e.mask,e.type,e.required,e.values))}addFields(e,s){this.setUserFields(e),this.setRequestFields(s)}addUserFields(e){this._userFields.push(e)}addRequestFields(e){this._requestFields.push(e)}}class Values{constructor(e){this._values=e}get values(){return[].concat(Object.keys(this._values).map((e,s)=>({key:e,value:Object.values(this._values)[s]})))}}class FieldsService{constructor(){this._http=new HttpService}async getServiceFields(){const e=await this._http.get(process.env.GET_SERVICES__BASE_URL+process.env.GET_SERVICES__SERVICE_FIELDS);return this._checkValidServiceFields(e)?new ServiceFields(e._embedded.user_fields,e._embedded.request_fields):null}_checkValidServiceFields(e){return e&&e._embedded&&e._embedded.request_fields&&e._embedded.user_fields&&e._embedded.request_fields.length&&e._embedded.user_fields.length}}class HttpService{get(e){return self.fetch?this._getFetch(e):this._getXMLHttpRequest(e)}_getFetch(e){const s=new Headers;return fetch(e,{method:"GET",headers:s,cache:"default"}).then(e=>e.json()).then(e=>e).catch(e=>{HandleLog.error("An error occurred while trying to get the service fields",e)})}_getXMLHttpRequest(e){return new Promise((s,t)=>{let i=new XMLHttpRequest;i.open("GET",e),i.onreadystatechange=()=>{4==i.readyState&&(200==i.status?s(JSON.parse(i.responseText)):t(i.responseText))},i.send()}).then(e=>e)}}class View{constructor(e){this._element=e}template(){HandleLog.error("The template method must be implemented")}update(e){this._element.innerHTML=this.template(e)}}class FieldsView extends View{constructor(e){super(e)}_handleInputTemplate({name:e,placeholder:s,type:t,required:i}){return"big_text"===t?`\n                <textarea\n                    ${i?"required":""}\n                    class="gs-text-field gs-text-field--textarea"\n                    placeholder="${s||""}"\n                    name="${e}"\n                ></textarea>\n            `:`\n                <input\n                    ${i?"required":""}\n                    class="gs-text-field"\n                    type="${"email"===t?t:"text"}"\n                    placeholder="${s||""}"\n                    name="${e}"\n                />\n            `}_handleSelectTemplate({name:e,values:s,required:t}){return`\n            <select class="gs-text-field gs-text-field--select" name="${e}" ${t?"required":""}>\n                <option value="" selected> Selecione uma opção </option>\n                ${s.map(e=>`\n                    <option value="${e.key}"> ${e.value} </option>\n                `)}\n            </select>\n      `}_handleItemTemplate(e){return e.map(e=>`\n            <li class="gs-list-fields__item">\n                <label class="gs-label"> ${e.label} ${e.required?'\n                        <strong class="gs-strong">*</strong>\n                    ':""}\n                </label>\n\n                ${"enumerable"===e.type?this._handleSelectTemplate(e):this._handleInputTemplate(e)}\n\n                ${e.required?'\n                    <span class="gs-message gs-message--warning"> Este campo é requerido! </span>\n                ':""}\n            </li>\n        `)}template(e){return e.length?`\n            <ul class="gs-list-fields">\n                ${this._handleItemTemplate(e).join("")}\n            </ul>\n        `:'\n            <span class="gs-no-fields"> Não foi encontrado nenhum campo </span>\n        '}}var serviceFieldsController;window.addEventListener("load",()=>{serviceFieldsController=new ServiceFieldsController});