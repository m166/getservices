class process{static get env(){return{GET_SERVICES__BASE_URL:"http://localhost:8080/",GET_SERVICES__SERVICE_FIELDS:"services/fields"}}}class ServiceFieldsController{constructor(){console.log(document,window);document.querySelector.bind(document)}setServices(e){e.preventDefault(),console.log(e)}confirmServices(e){e.preventDefault(),console.log(e)}backToServices(e){e.preventDefault(),console.log(e)}}class HandleLog{static error(e="",t=""){throw new Error(`ERROR: ${e} ${t}`)}static warning(e="",t=""){const s=`WARNING: ${e} ${t}`;console.warn(s)}static info(e="",t=""){const s=`INFO: ${e} ${t}`;console.info(s)}static log(e="",t=""){const s=`LOG: ${e} ${t}`;console.log(s)}}class Field{constructor(e="",t="",s="",r="",l="",i=!1,n=null){this._name=e,this._label=t,this._placeholder=s,this._mask=r,this._type=l,this._required=i,this._values=n?new Values(n).values:n}get name(){return this._name}get label(){return this._label}get placeholder(){return this._placeholder}get mask(){return this._mask}get type(){return this._type}get required(){return this._required}get values(){return this._values}}class ServiceFields{constructor(e=[],t=[]){this._userFields=e.length?this._createListFields(e):e,this._requestFields=t.length?this._createListFields(t):t}get userFields(){return[].concat(this._userFields)}get requestFields(){return[].concat(this._requestFields)}_createListFields(e){return e.map(e=>new Field(e.name,e.label,e.placeholder,e.mask,e.type,e.required,e.values))}addFields(e,t){this.setUserFields(e),this.setRequestFields(t)}addUserFields(e){this._userFields.push(e)}addRequestFields(e){this._requestFields.push(e)}}class Values{constructor(e){this._values=e}get values(){return[].concat(Object.keys(this._values).map((e,t)=>({key:e,value:Object.values(this._values)[t]})))}}class FieldsService{constructor(){this._http=new HttpService}async getServiceFields(){const e=await this._http.get(process.env.GET_SERVICES__BASE_URL+process.env.GET_SERVICES__SERVICE_FIELDS);return this._checkValidServiceFields(e)?new ServiceFields(e._embedded.user_fields,e._embedded.request_fields):null}_checkValidServiceFields(e){return e&&e._embedded&&e._embedded.request_fields&&e._embedded.user_fields&&e._embedded.request_fields.length&&e._embedded.user_fields.length}}class HttpService{get(e){return self.fetch?this._getFetch(e):this._getXMLHttpRequest(e)}_getFetch(e){const t=new Headers;return fetch(e,{method:"GET",headers:t,cache:"default"}).then(e=>e.json()).then(e=>e).catch(e=>{HandleLog.error("An error occurred while trying to get the service fields",e)})}_getXMLHttpRequest(e){return new Promise((t,s)=>{let r=new XMLHttpRequest;r.open("GET",e),r.onreadystatechange=()=>{4==r.readyState&&(200==r.status?t(JSON.parse(r.responseText)):s(r.responseText))},r.send()}).then(e=>e)}}var serviceFieldsController;window.addEventListener("load",()=>{serviceFieldsController=new ServiceFieldsController});